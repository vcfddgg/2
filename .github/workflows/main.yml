name: RDP via Tailscale + RustDesk (Workflow A)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: Tailscale tailnet (e.g. you@gmail.com)
        required: true
      ts_api_key:
        description: Tailscale API key (device admin, no Bearer)
        required: true
      ts_authkey:
        description: Tailscale Auth key (reusable or ephemeral)
        required: true
      quick_test:
        description: Run 5-minute test
        type: boolean
        default: false
      runtime_minutes:
        description: Runtime (max 360; default 355 when not test)
        required: false
        default: "355"
      do_purge:
        description: Purge bullet* devices at start
        required: false
        default: "true"
      cycles:
        description: 0=stop after A; N=handoffs left incl this run
        required: false
        default: "0"
      rdp_count:
        description: How many RDP instances (1-10)
        required: false
        default: "1"

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - id: mk
        run: |
          $n = [int]"${{ inputs.rdp_count }}"
          if ($n -lt 1) { $n = 1 }
          if ($n -gt 10) { $n = 10 }
          $inc = @()
          for ($i=1; $i -le $n; $i++){ $inc += @{ id = $i } }
          $json = @{ include = $inc } | ConvertTo-Json -Compress
          "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append

  rdp:
    needs: setup
    runs-on: windows-2025
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 370
    env:
      RDP_USER: Bullettemporary
      RDP_PASS: Bullet@12345

    steps:
      - name: Setup hostname
        run: |
          if ([int]"${{ inputs.rdp_count }}" -gt 1) {
            $hn = "bullet${{ matrix.id }}"
          } else {
            $hn = "bullet"
          }
          "TS_HOSTNAME=$hn" | Out-File -Append $env:GITHUB_ENV
          Write-Host "Hostname: $hn"

      - name: Setup Tailscale + RDP
        run: |
          $ErrorActionPreference = "Stop"
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          function IntOr($v,$d){ if("$v" -match '^\d+$'){ [int]$v } else { [int]$d } }

          $runtime = IntOr("${{ inputs.runtime_minutes }}",355)
          if (Yes("${{ inputs.quick_test }}")) { $runtime = 5 }
          if (-not (Yes("${{ inputs.quick_test }}")) -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }
          "RUNTIME_MINUTES=$runtime" | Out-File -Append $env:GITHUB_ENV
          $tsHost = "${env:TS_HOSTNAME}"

          if (Yes("${{ inputs.do_purge }}")) {
            try {
              $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ inputs.ts_api_key }}:"))
              $tn = [uri]::EscapeDataString("${{ inputs.ts_tailnet }}")
              $list = Invoke-RestMethod -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers @{ Authorization = "Basic $auth" }
              foreach($d in $list.devices){
                if ($d.hostname -match '^bullet[0-9]*$'){
                  Invoke-RestMethod -Method Delete -Uri "https://api.tailscale.com/api/v2/device/$($d.id)" -Headers @{ Authorization = "Basic $auth" } -ErrorAction SilentlyContinue
                }
              }
              Write-Host "Purged bullet* devices (if any)."
            } catch { Write-Host "Purge warning: $($_.Exception.Message)" }
          }

          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $ts)) {
            $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
            $dst = "$env:TEMP\ts-setup.exe"
            Invoke-WebRequest $url -OutFile $dst -UseBasicParsing
            Start-Process $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & $ts logout | Out-Null
          & $ts up --authkey "${{ inputs.ts_authkey }}" --hostname "$tsHost" --accept-routes --accept-dns=false
          $ip = (& $ts ip -4 | Select-Object -First 1)

          $u=$env:RDP_USER; $p=$env:RDP_PASS
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -EA SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember Administrators $u
            Add-LocalGroupMember "Remote Desktop Users" $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" fDenyTSConnections 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

          Write-Host "RDP login -> user=$u pass=$p ip=$ip dns=$tsHost"

      - name: Install RustDesk (winget then fallback)
        run: |
          $ErrorActionPreference = "SilentlyContinue"
          winget install --id RustDesk.RustDesk -e --silent --accept-package-agreements --accept-source-agreements --disable-interactivity
          $paths = @(
            "C:\Program Files\RustDesk\rustdesk.exe",
            "C:\Program Files (x86)\RustDesk\rustdesk.exe",
            "$env:LOCALAPPDATA\Programs\RustDesk\rustdesk.exe"
          )
          $exe = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exe) {
            try {
              $url = "https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-x86_64.exe"
              $dst = "$env:TEMP\rustdesk-setup.exe"
              Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
              Start-Process $dst -ArgumentList "/verysilent /norestart" -Wait
            } catch { Write-Host "RustDesk EXE fallback failed: $($_.Exception.Message)" }
          }
          Write-Host "RustDesk install step completed."

      - name: Keep alive
        run: |
          $mins = [int]"${{ env.RUNTIME_MINUTES }}"
          $end = (Get-Date).AddMinutes($mins)
          while ((Get-Date) -lt $end) {
            Stop-Process -Name "TailscaleSystemUI" -Force -ErrorAction SilentlyContinue
            Stop-Process -Name "Tailscale" -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 60
          }

      - name: Dispatch next or stop
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $cycles = [int]"${{ inputs.cycles }}"
          if ($cycles -gt 0) {
            $next = $cycles - 1
            if ($next -le 0) {
              $url = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-stop.yml/dispatches"
              $hdr = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
              $payload = @{ ts_tailnet="${{ inputs.ts_tailnet }}"; ts_api_key="${{ inputs.ts_api_key }}"; base_prefix="bullet"; max_count="10"; dry_run="false" }
              $body = @{ ref="${{ github.ref_name }}"; inputs=$payload } | ConvertTo-Json -Depth 20
              Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body | Out-Null
              Write-Host "Dispatched STOP."
            } else {
              $payload = @{
                ts_tailnet      = "${{ inputs.ts_tailnet }}"
                ts_api_key      = "${{ inputs.ts_api_key }}"
                ts_authkey      = "${{ inputs.ts_authkey }}"
                quick_test      = "${{ inputs.quick_test }}"
                runtime_minutes = "${{ inputs.runtime_minutes }}"
                do_purge        = "${{ inputs.do_purge }}"
                cycles          = "$next"
                rdp_count       = "${{ inputs.rdp_count }}"
              }
              $url2 = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-B.yml/dispatches"
              $hdr2 = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
              $body2 = @{ ref="${{ github.ref_name }}"; inputs=$payload } | ConvertTo-Json -Depth 20
              Invoke-WebRequest -Method POST -Uri $url2 -Headers $hdr2 -Body $body2 | Out-Null
              Write-Host "Dispatched Workflow B with cycles=$next"
            }
          } else {
            Write-Host "No cycles configured. Done."
          }
